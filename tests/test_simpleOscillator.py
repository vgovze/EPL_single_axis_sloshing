import unittest

import numpy as np

from context import myModules
from myModules.simpleOscillator import getSolution, _critDampedSol,\
    _overdampedSol, _underdampedSol, unitConverter

class test_simpleOscillator(unittest.TestCase):
    a0 = 2
    omega = 3
    b = 2
    tau = 2

    # These solutions were generated by sympy.
    # Overdampened system:
    c_od = 0.5
    u1_od = 0.556667905035692
    du1_od = -0.163044254516045
    u2_od = 0.0329022721142147
    du2_od = -0.056167691842621
    up_od = -0.06255870642422787
    dup_od = -0.545290000501894

    # Underdampened system:
    c_ud = 4
    u1_ud = -0.128357828543092
    du1_ud = 0.202652648155964
    u2_ud = -0.0428941341028865
    du2_ud = -0.179428146482963
    up_ud = -0.143080138652707
    dup_ud = -0.637115844830694

    # Critically dampened system:
    c_cd = 1
    u1_cd = 0.135335283236613
    du1_cd = -0.135335283236613
    u2_cd = 0.270670566473225
    du2_cd = -0.135335283236613
    up_cd = -0.0705139546862158
    dup_cd = -0.561471316943789

    # Initial conditions.
    u0 = 100
    du0 = 50

    # Physical parameters to dimensionless parameters.
    m = 10
    d = 2
    k = 5
    w = 3
    f0 = 5
    time = 7
    T = 2
    L = 5
    x = 3
    dx = 10

    b_convert = d*T/m
    c_convert = k*T**2/m
    a0_convert = f0*T**2/m/L
    omega_convert = w*T
    tau_convert = time/T
    u_convert = x/L
    du_convert = dx*T/L

    # Amplitude plot. Physical solution.
    freqRat = 0.9
    amp = f0/np.sqrt(k**2*(1-freqRat**2)**2 + d**2*freqRat**2*k/m)

    def test_solutionSelector(self):
        self.assertEqual(type(getSolution(self.b, self.c_ud)),
                         type(_underdampedSol()))
        self.assertEqual(type(getSolution(self.b, self.c_od)),
                         type(_overdampedSol()))
        self.assertEqual(type(getSolution(self.b, self.c_cd)),
                         type(_critDampedSol()))

    def test_overdampedSol(self):
        sol = getSolution(self.b, self.c_od)
        sol.setParams(self.b, self.c_od, self.omega, self.a0)

        self.assertAlmostEqual(sol._u1(self.tau), self.u1_od, msg="u1")
        self.assertAlmostEqual(sol._du1(self.tau), self.du1_od, msg="du1")
        self.assertAlmostEqual(sol._u2(self.tau), self.u2_od, msg="u2")
        self.assertAlmostEqual(sol._du2(self.tau), self.du2_od, msg="du2")
        self.assertAlmostEqual(sol._up(self.tau), self.up_od, msg="up")
        self.assertAlmostEqual(sol._dup(self.tau), self.dup_od, msg="dup")

    def test_underdampedSol(self):
        sol = getSolution(self.b, self.c_ud)
        sol.setParams(self.b, self.c_ud, self.omega, self.a0)

        self.assertAlmostEqual(sol._u1(self.tau), self.u1_ud, msg="u1")
        self.assertAlmostEqual(sol._du1(self.tau), self.du1_ud, msg="du1")
        self.assertAlmostEqual(sol._u2(self.tau), self.u2_ud, msg="u2")
        self.assertAlmostEqual(sol._du2(self.tau), self.du2_ud, msg="du2")
        self.assertAlmostEqual(sol._up(self.tau), self.up_ud, msg="up")
        self.assertAlmostEqual(sol._dup(self.tau), self.dup_ud, msg="dup")

    def test_critDampSol(self):
        sol = getSolution(self.b, self.c_cd)
        sol.setParams(self.b, self.c_cd, self.omega, self.a0)

        self.assertAlmostEqual(sol._u1(self.tau), self.u1_cd, msg="u1")
        self.assertAlmostEqual(sol._du1(self.tau), self.du1_cd, msg="du1")
        self.assertAlmostEqual(sol._u2(self.tau), self.u2_cd, msg="u2")
        self.assertAlmostEqual(sol._du2(self.tau), self.du2_cd, msg="du2")
        self.assertAlmostEqual(sol._up(self.tau), self.up_cd, msg="up")
        self.assertAlmostEqual(sol._dup(self.tau), self.dup_cd, msg="dup")

    def test_initialConditions(self):
        for i in [self.c_od, self.c_ud, self.c_cd]:
            sol = getSolution(self.b, i)
            sol.setParams(self.b, i, self.omega, self.a0)
            sol.setInitialConditions(self.u0, self.du0)

            u0 = sol.u(0)
            du0 = sol.du(0)

            self.assertAlmostEqual(self.u0, u0)
            self.assertAlmostEqual(self.du0, du0)

    def test_setParameters(self):
        sol = getSolution(self.b, self.c_cd)
        sol.setParams(self.b, self.c_cd, self.omega, self.a0)

        self.assertAlmostEqual(sol.b, self.b)
        self.assertAlmostEqual(sol.c, self.c_cd)
        self.assertAlmostEqual(sol.omega, self.omega)
        self.assertAlmostEqual(sol.a0, self.a0)

    def test_unitConversion(self):
        conv = unitConverter()
        self.assertAlmostEqual(conv.to_b(self.d, self.T, self.m),
                               self.b_convert)
        self.assertAlmostEqual(conv.to_c(self.k, self.T, self.m),
                               self.c_convert)
        self.assertAlmostEqual(conv.to_a0(self.f0, self.T, self.m, self.L),
                               self.a0_convert)
        self.assertAlmostEqual(conv.to_omega(self.w, self.T),
                               self.omega_convert)
        self.assertAlmostEqual(conv.to_tau(self.time, self.T),
                               self.tau_convert)
        self.assertAlmostEqual(conv.to_u(self.x, self.L),
                               self.u_convert)
        self.assertAlmostEqual(conv.to_du(self.dx, self.T, self.L),
                               self.du_convert)
        self.assertAlmostEqual(conv.to_d(self.b_convert, self.T, self.m),
                               self.d)
        self.assertAlmostEqual(conv.to_k(self.c_convert, self.T, self.m),
                               self.k)
        self.assertAlmostEqual(conv.to_f0(self.a0_convert, self.T, self.m,
                                          self.L), self.f0)
        self.assertAlmostEqual(conv.to_t(self.tau_convert, self.T), self.time)
        self.assertAlmostEqual(conv.to_w(self.omega_convert, self.T), self.w)
        self.assertAlmostEqual(conv.to_x(self.u_convert, self.L), self.x)
        self.assertAlmostEqual(conv.to_dx(self.du_convert, self.T, self.L),
                               self.dx)

    def test_amplitude(self):
        sol = getSolution(self.b, self.c_ud)
        uConv = unitConverter()
        b = uConv.to_b(self.d, self.T, self.m)
        c = uConv.to_c(self.k, self.T, self.m)
        a0 = uConv.to_a0(self.f0, self.T, self.m, self.L)

        sol.setParams(b, c, self.freqRat*c, a0)
        self.assertAlmostEqual(uConv.to_x(sol.amp(self.freqRat),
                                          self.L), self.amp)

    def test_freqRatio(self):
        sol = getSolution(self.b, self.c_ud)
        sol.setParams(self.b, self.omega**2/self.freqRat, self.omega, self.a0)
        self.assertAlmostEqual(sol.freqRat(), self.freqRat)

if __name__ == "__main__":
    unittest.main()